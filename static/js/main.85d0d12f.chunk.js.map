{"version":3,"sources":["components/Layout/Layout.tsx","components/QuizQuestion/QuizQuestion.tsx","components/App/App.tsx","index.tsx"],"names":["Layout","props","className","children","QuizQuestion","question","correctHashedAnswer","hint","undefined","renderNextQuestion","timeLine","sleep","ms","Promise","resolve","setTimeout","inputRef","useRef","u","c","l","onSubmit","values","a","play","md5","answer","trim","toLowerCase","restart","pause","blinkLogoRed","FORM_ERROR","blinkLogoGreen","useEffect","to","current","rotation","transformOrigin","rotateLogo","render","submitError","handleSubmit","submitting","pristine","xmlns","width","height","version","viewBox","ref","id","fill","d","opacity","name","input","type","placeholder","autoComplete","disabled","TweenMax","fromTo","repeat","yoyo","questions","TimelineMax","paused","useState","count","setCount","document","getElementById"],"mappings":"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","file":"static/js/main.85d0d12f.chunk.js","sourcesContent":["import React, { FC } from \"react\";\r\nimport \"./layout.css\";\r\n\r\nconst Layout: FC = props => (\r\n  <div className=\"container\">\r\n    <main>{props.children}</main>\r\n  </div>\r\n);\r\n\r\nexport { Layout };\r\n","import React, { FC, useRef, useEffect } from \"react\";\r\nimport { Form, Field } from \"react-final-form\";\r\nimport { FORM_ERROR } from \"final-form\";\r\nimport { TimelineMax, Sine, TweenMax } from \"gsap\";\r\nimport md5 from \"md5\";\r\nimport \"./quizquestion.css\";\r\n\r\ninterface IProps {\r\n  renderNextQuestion: () => void;\r\n  question: string;\r\n  correctHashedAnswer: string;\r\n  hint?: string;\r\n  timeLine: TimelineMax;\r\n}\r\n\r\nconst QuizQuestion: FC<IProps> = ({ question, correctHashedAnswer, hint = undefined, renderNextQuestion, timeLine }) => {\r\n  const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  const u = useRef<SVGPathElement>(null);\r\n  const c = useRef<SVGPathElement>(null);\r\n  const l = useRef<SVGPathElement>(null);\r\n\r\n  const onSubmit = async (values: any) => {\r\n    timeLine.play();\r\n    const hashedAnswer = md5((values.answer as string).trim().toLowerCase());\r\n    if (hashedAnswer !== correctHashedAnswer.trim().toLowerCase()) {\r\n      await sleep(3000);\r\n      timeLine.restart();\r\n      timeLine.pause();\r\n      blinkLogoRed(u, c, l);\r\n      return { [FORM_ERROR]: \"Forkert svar!\" };\r\n    } else {\r\n      await sleep(3000);\r\n      timeLine.restart();\r\n      timeLine.pause();\r\n      blinkLogoGreen(u, c, l);\r\n      renderNextQuestion();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    rotateLogo(timeLine, u, c, l);\r\n  });\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={onSubmit}\r\n      render={({ submitError, handleSubmit, submitting, pristine }) => (\r\n        <>\r\n          <form onSubmit={handleSubmit}>\r\n            <svg className=\"logo\" xmlns=\"http://www.w3.org/2000/svg\" width=\"100pt\" height=\"70pt\" version=\"1.1\" viewBox=\"0 0 1000 709\">\r\n              <path ref={u} id=\"u\" fill=\"#ffffff\" d=\" M 0.00 0.00 L 96.06 0.00 C 100.40 18.33 103.70 37.12 111.48 54.41 C 115.31 63.06 120.47 71.11 126.78 78.16 C 152.36 109.49 192.58 128.40 233.06 127.65 C 277.32 124.98 318.66 97.59 340.01 58.98 C 349.59 40.66 352.50 19.95 356.86 0.00 L 454.74 0.00 C 451.20 20.65 448.38 41.49 442.84 61.74 C 435.47 89.55 421.78 115.49 404.13 138.12 C 380.11 168.84 348.08 193.45 311.71 207.70 C 252.81 231.18 183.98 229.07 127.07 200.84 C 116.35 195.64 106.34 189.15 96.41 182.59 C 78.17 170.21 62.19 154.63 48.91 137.05 C 23.06 102.79 7.23 61.66 0.00 19.54 L 0.00 0.00 Z\" opacity=\"1.00\" />\r\n              <path ref={c} id=\"c\" fill=\"#ffffff\" d=\" M 500.43 243.52 C 524.46 234.57 550.49 230.36 576.08 233.17 C 577.12 233.50 579.57 232.87 579.14 234.82 C 580.06 264.34 580.41 293.91 578.73 323.41 C 558.65 331.52 536.42 333.17 516.95 342.96 C 505.75 348.93 495.13 356.19 486.28 365.34 C 462.17 389.85 449.34 424.77 451.22 459.03 C 450.76 474.19 453.80 489.39 459.82 503.30 C 471.35 529.96 492.26 552.01 516.99 566.94 C 535.75 577.93 557.86 579.77 578.79 583.70 C 580.41 615.54 579.95 647.44 578.99 679.29 C 537.21 680.13 495.62 667.72 460.20 645.79 C 426.32 624.95 397.57 595.53 378.45 560.58 C 363.46 533.21 354.61 502.31 354.09 471.05 C 354.14 464.37 353.36 457.72 353.36 451.04 C 352.62 390.81 378.80 330.83 423.42 290.38 C 446.19 270.59 472.08 254.07 500.43 243.52 Z\" opacity=\"1.00\" />\r\n              <path ref={l} id=\"l\" fill=\"#ffffff\" d=\" M 703.94 233.20 C 736.36 231.52 768.87 231.57 801.29 233.17 C 803.34 310.10 801.03 387.07 802.17 464.01 C 802.67 482.86 809.43 501.00 818.79 517.18 C 826.08 529.45 834.17 541.61 845.40 550.67 C 867.33 568.98 895.34 577.51 922.74 583.70 C 925.56 615.54 924.77 647.58 922.91 679.46 C 867.31 675.99 812.16 654.11 771.90 615.14 C 758.97 602.83 748.38 588.37 738.49 573.59 C 716.03 539.05 704.07 498.09 702.88 457.00 C 702.60 449.33 702.98 441.65 703.03 433.98 C 703.95 367.06 701.81 300.11 703.94 233.20 Z\" opacity=\"1.00\" />\r\n            </svg>\r\n            <span className=\"question\">{question}</span>\r\n            <Field name=\"answer\">{({ input }) => <input {...input} ref={inputRef} type=\"text\" placeholder=\"Dit svar\" autoComplete=\"off\" />}</Field>\r\n            <button type=\"submit\" disabled={submitting || pristine}>\r\n              Svar\r\n            </button>\r\n            <div className=\"error\">\r\n              {submitError && <span className=\"errorMessage\">{submitError}</span>}\r\n              {submitError && hint && <span className=\"hint\">{hint}</span>}\r\n            </div>\r\n            {/* <UCL />x  */}\r\n\r\n            {/* <svg ref={loadingDivRef} height=\"100\" width=\"200\" visibility=\"hidden\">\r\n              <circle cx=\"50\" cy=\"50\" r=\"10\" fill=\"black\" />\r\n              <circle cx=\"100\" cy=\"50\" r=\"10\" fill=\"black\" />\r\n              <circle cx=\"150\" cy=\"50\" r=\"10\" fill=\"black\" />\r\n            </svg> */}\r\n            {/* <img ref={loadingDivRef} src={UCL} className=\"App-logo\" alt=\"logo\" /> */}\r\n          </form>\r\n          {/* {submitError && <span ref={failXRef}>X</span>}\r\n          {submitError || <span ref={successCheckMarkRef}>&#10004;</span>} */}\r\n        </>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nfunction blinkLogoGreen(u: React.RefObject<SVGPathElement>, c: React.RefObject<SVGPathElement>, l: React.RefObject<SVGPathElement>) {\r\n  TweenMax.fromTo(\r\n    [u.current!, c.current!, l.current!],\r\n    0.5,\r\n    {\r\n      fill: \"white\"\r\n    },\r\n    {\r\n      fill: \"green\",\r\n      repeat: 1,\r\n      yoyo: true\r\n    }\r\n  );\r\n}\r\n\r\nfunction blinkLogoRed(u: React.RefObject<SVGPathElement>, c: React.RefObject<SVGPathElement>, l: React.RefObject<SVGPathElement>) {\r\n  TweenMax.fromTo(\r\n    [u.current!, c.current!, l.current!],\r\n    0.5,\r\n    {\r\n      fill: \"white\"\r\n    },\r\n    {\r\n      fill: \"red\",\r\n      repeat: 1,\r\n      yoyo: true\r\n    }\r\n  );\r\n}\r\n\r\nfunction rotateLogo(timeLine: TimelineMax, u: React.RefObject<SVGPathElement>, c: React.RefObject<SVGPathElement>, l: React.RefObject<SVGPathElement>) {\r\n  timeLine.to(u.current!, 1, {\r\n    rotation: 360,\r\n    transformOrigin: \"50% 50%\"\r\n  });\r\n  timeLine.to(c.current!, 1, {\r\n    rotation: 360,\r\n    transformOrigin: \"50% 50%\"\r\n  });\r\n  timeLine.to(l.current!, 1, {\r\n    rotation: 360,\r\n    transformOrigin: \"50% 50%\"\r\n  });\r\n}\r\nexport { QuizQuestion };\r\n","import React, { useState } from \"react\";\r\nimport { Layout } from \"../Layout/Layout\";\r\nimport { QuizQuestion } from \"../QuizQuestion/QuizQuestion\";\r\nimport { TimelineMax } from \"gsap\";\r\n\r\ninterface IQuestion {\r\n  question: string;\r\n  correctHashedAnswer: string;\r\n  hint?: string;\r\n}\r\n\r\nconst questions: IQuestion[] = [{ question: \"Spørgsmål a \", correctHashedAnswer: \"0CC175B9C0F1B6A831C399E269772661\", hint: \"Hint: svaret er a\" }, { question: \"2\", correctHashedAnswer: \"b\" }, { question: \"3\", correctHashedAnswer: \"c\" }, { question: \"4\", correctHashedAnswer: \"d\" }, { question: \"5\", correctHashedAnswer: \"e\" }, { question: \"6\", correctHashedAnswer: \"f\" }, { question: \"7\", correctHashedAnswer: \"g\" }, { question: \"8\", correctHashedAnswer: \"h\" }, { question: \"9\", correctHashedAnswer: \"i\" }, { question: \"10\", correctHashedAnswer: \"j\" }];\r\nconst timeLine = new TimelineMax({ paused: true});\r\n\r\nconst App = () => {\r\n  const [count, setCount] = useState(0);\r\n  return (\r\n    <Layout>\r\n      <QuizQuestion\r\n        {...questions[count]}\r\n        timeLine={timeLine}\r\n        renderNextQuestion={() => {\r\n          setCount(count + 1);\r\n        }}\r\n      />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport { App };","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport \"normalize.css\";\r\nimport { App } from \"./components/App/App\";\r\n\r\nrender(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}