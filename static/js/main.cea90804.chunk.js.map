{"version":3,"sources":["components/layout/Layout.tsx","components/levels/QuizQuestion.tsx","components/app/App.tsx","index.tsx"],"names":["Layout","props","className","children","QuizQuestion","question","correctAnswer","hint","undefined","renderNextLevel","timeLine","sleep","ms","Promise","resolve","setTimeout","loadingDivRef","useRef","inputRef","onSubmit","values","a","play","loadingDiv","current","style","visibility","answer","trim","toLowerCase","FORM_ERROR","useEffect","paused","staggerTo","y","repeat","repeatDelay","yoyo","ease","Sine","easeInOut","pause","render","submitError","handleSubmit","submitting","pristine","name","input","ref","type","placeholder","disabled","height","width","cx","cy","r","fill","levels","TimelineMax","useState","count","setCount","main","document","getElementById"],"mappings":"iOAGMA,G,MAAa,SAAAC,GAAK,OACtB,yBAAKC,UAAU,aACb,8BAAOD,EAAME,a,qDCSXC,G,MAA2B,SAAC,GAA8E,IAA5EC,EAA2E,EAA3EA,SAAUC,EAAiE,EAAjEA,cAAiE,IAAlDC,YAAkD,WAA3CC,EAA2C,EAAhCC,EAAgC,EAAhCA,gBAAiBC,EAAe,EAAfA,SACxFC,EAAQ,SAACC,GAAD,OAAgB,IAAIC,QAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MACnEI,EAAgBC,iBAAsB,MACtCC,EAAWD,iBAAyB,MAEpCE,EAAQ,sCAAG,WAAOC,GAAP,eAAAC,EAAA,4DACfX,EAASY,QACHC,EAAaP,EAAcQ,SACtBC,MAAMC,WAAa,UAHf,SAITf,EAAM,KAJG,UAKfY,EAAWE,MAAMC,WAAa,SACzBN,EAAOO,OAAkBC,OAAOC,gBAAkBvB,EANxC,yDAOHwB,IAAa,kBAPV,QASbrB,IATa,0CAAH,sDA8Bd,OAjBAsB,oBAAU,WACRrB,EAASsB,QACPtB,EAASuB,UACPjB,EAAcQ,QAASrB,SACvB,GACA,CACE+B,GAAI,GACJC,QAAS,EACTC,YAAa,GACbC,MAAM,EACNC,KAAMC,IAAKC,WAEb,IAEJ9B,EAAS+B,UAIT,kBAAC,IAAD,CACEtB,SAAUA,EACVuB,OAAQ,gBAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAcC,EAA9B,EAA8BA,WAAYC,EAA1C,EAA0CA,SAA1C,OACN,oCACE,0BAAM3B,SAAUyB,GACd,0BAAM1C,UAAU,YAAYG,GAC5B,kBAAC,IAAD,CAAO0C,KAAK,UAAU,gBAAGC,EAAH,EAAGA,MAAH,OAAe,2CAAWA,EAAX,CAAkBC,IAAK/B,EAAUgC,KAAK,OAAOC,YAAY,gBAC9F,4BAAQD,KAAK,SAASE,SAAUP,GAAcC,GAA9C,QAGA,yBAAK5C,UAAU,SACZyC,GAAe,0BAAMzC,UAAU,gBAAgByC,GAC/CA,GAAepC,GAAQ,0BAAML,UAAU,QAAQK,IAElD,yBAAK0C,IAAKjC,EAAeqC,OAAO,MAAMC,MAAM,MAAM5B,WAAW,UAC3D,4BAAQ6B,GAAG,KAAKC,GAAG,KAAKC,EAAE,KAAKC,KAAK,UACpC,4BAAQH,GAAG,MAAMC,GAAG,KAAKC,EAAE,KAAKC,KAAK,UACrC,4BAAQH,GAAG,MAAMC,GAAG,KAAKC,EAAE,KAAKC,KAAK,kBCxD7CC,EAAsB,CAAC,CAAEtD,SAAU,IAAKC,cAAe,IAAKC,KAAM,qBAAuB,CAAEF,SAAU,IAAKC,cAAe,KAAO,CAAED,SAAU,IAAKC,cAAe,KAAO,CAAED,SAAU,IAAKC,cAAe,KAAO,CAAED,SAAU,IAAKC,cAAe,KAAO,CAAED,SAAU,IAAKC,cAAe,KAAO,CAAED,SAAU,IAAKC,cAAe,KAAO,CAAED,SAAU,IAAKC,cAAe,KAAO,CAAED,SAAU,IAAKC,cAAe,KAAO,CAAED,SAAU,KAAMC,cAAe,MAClbI,EAAW,IAAIkD,ICPrBlB,iBAAO,kBDSK,WAAO,IAAD,EACUmB,mBAAS,GADnB,mBACTC,EADS,KACFC,EADE,KAEVC,EAAkC/C,iBAAO,MAC/C,OACE,kBAAC,EAAD,KACE,yBAAKgC,IAAKe,GACR,kBAAC,EAAD,iBACML,EAAOG,GADb,CAEEpD,SAAUA,EACVD,gBAAiB,WACfsD,EAASD,EAAQ,UCnBtB,MAASG,SAASC,eAAe,W","file":"static/js/main.cea90804.chunk.js","sourcesContent":["import React, { FC } from \"react\";\r\nimport \"./layout.css\";\r\n\r\nconst Layout: FC = props => (\r\n  <div className=\"container\">\r\n    <main>{props.children}</main>\r\n  </div>\r\n);\r\n\r\nexport { Layout };\r\n","import React, { FC, useRef, useEffect } from \"react\";\r\nimport { Form, Field } from \"react-final-form\";\r\nimport { FORM_ERROR } from \"final-form\";\r\nimport { TimelineMax, Sine } from \"gsap\";\r\nimport \"./quizquestion.css\";\r\n\r\ninterface IProps {\r\n  renderNextLevel: () => void;\r\n  question: string;\r\n  correctAnswer: string;\r\n  hint?: string;\r\n  timeLine: TimelineMax;\r\n}\r\n\r\nconst QuizQuestion: FC<IProps> = ({ question, correctAnswer, hint = undefined, renderNextLevel, timeLine }) => {\r\n  const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\r\n  const loadingDivRef = useRef<SVGSVGElement>(null);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const onSubmit = async (values: any) => {\r\n    timeLine.play();\r\n    const loadingDiv = loadingDivRef.current as SVGSVGElement;\r\n    loadingDiv.style.visibility = \"visible\";\r\n    await sleep(3000);\r\n    loadingDiv.style.visibility = \"hidden\";\r\n    if ((values.answer as string).trim().toLowerCase() !== correctAnswer) {\r\n      return { [FORM_ERROR]: \"Forkert svar!\" };\r\n    } else {\r\n      renderNextLevel();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    timeLine.paused &&\r\n      timeLine.staggerTo(\r\n        loadingDivRef.current!.children,\r\n        0.3,\r\n        {\r\n          y: -10,\r\n          repeat: -1,\r\n          repeatDelay: 0.1,\r\n          yoyo: true,\r\n          ease: Sine.easeInOut\r\n        },\r\n        0.3\r\n      );\r\n    timeLine.pause();\r\n  });\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={onSubmit}\r\n      render={({ submitError, handleSubmit, submitting, pristine }) => (\r\n        <>\r\n          <form onSubmit={handleSubmit}>\r\n            <span className=\"question\">{question}</span>\r\n            <Field name=\"answer\">{({ input }) => <input {...input} ref={inputRef} type=\"text\" placeholder=\"Dit svar\" />}</Field>\r\n            <button type=\"submit\" disabled={submitting || pristine}>\r\n              Svar\r\n            </button>\r\n            <div className=\"error\">\r\n              {submitError && <span className=\"errorMessage\">{submitError}</span>}\r\n              {submitError && hint && <span className=\"hint\">{hint}</span>}\r\n            </div>\r\n            <svg ref={loadingDivRef} height=\"100\" width=\"200\" visibility=\"hidden\">\r\n              <circle cx=\"50\" cy=\"50\" r=\"10\" fill=\"black\" />\r\n              <circle cx=\"100\" cy=\"50\" r=\"10\" fill=\"black\" />\r\n              <circle cx=\"150\" cy=\"50\" r=\"10\" fill=\"black\" />\r\n            </svg>\r\n          </form>\r\n          {/* {submitError && <span ref={failXRef}>X</span>}\r\n          {submitError || <span ref={successCheckMarkRef}>&#10004;</span>} */}\r\n        </>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport { QuizQuestion };\r\n","import React, { useState, useRef, RefObject } from \"react\";\r\nimport { Layout } from \"../layout/Layout\";\r\nimport { QuizQuestion } from \"../levels/QuizQuestion\";\r\nimport { TimelineMax } from \"gsap\";\r\n\r\ninterface QuizLevel {\r\n  question: string;\r\n  correctAnswer: string;\r\n  hint?: string;\r\n}\r\n\r\nconst levels: QuizLevel[] = [{ question: \"1\", correctAnswer: \"a\", hint: \"Hint: svaret er a\" }, { question: \"2\", correctAnswer: \"b\" }, { question: \"3\", correctAnswer: \"c\" }, { question: \"4\", correctAnswer: \"d\" }, { question: \"5\", correctAnswer: \"e\" }, { question: \"6\", correctAnswer: \"f\" }, { question: \"7\", correctAnswer: \"g\" }, { question: \"8\", correctAnswer: \"h\" }, { question: \"9\", correctAnswer: \"i\" }, { question: \"10\", correctAnswer: \"j\" }];\r\nconst timeLine = new TimelineMax();\r\n\r\nconst App = () => {\r\n  const [count, setCount] = useState(0);\r\n  const main: RefObject<HTMLDivElement> = useRef(null);\r\n  return (\r\n    <Layout>\r\n      <div ref={main}>\r\n        <QuizQuestion\r\n          {...levels[count]}\r\n          timeLine={timeLine}\r\n          renderNextLevel={() => {\r\n            setCount(count + 1);\r\n          }}\r\n        />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport { App };\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport \"normalize.css\";\r\nimport { App } from \"./components/app/App\";\r\n\r\nrender(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}